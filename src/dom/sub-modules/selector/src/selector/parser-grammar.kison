/**
 * lalr grammar and lexer rules for css selector.
 * refer: http://www.w3.org/TR/selectors/
 * @author yiminghe@gmail.com
 */
(function () {
    var escape = '(?:\\\\[^\\n\\r\\f0-9a-f])';

    var nmstart = '(?:[\\w]|[^\\x00-\\xa0]|' + escape + ')';

    var nmchar = '(?:[\\w\\d-]|[^\\x00-\\xa0]|' + escape + ')';

    var ident = '(?:' + nmstart + nmchar + '*)';

    var name = '(?:' + nmchar + '+)';

    var w = '(?:[\\t\\r\\n\\f\\x20]*)';

    var s = '(?:[\\t\\r\\n\\f\\x20]+)';

    return {
        productions: [
            // ---------------------- selectors_group
            {
                symbol: 'selectors_group',
                rhs: ['selector'],
                action: function () {
                    return [this.$1];
                }
            },
            {
                symbol: 'selectors_group',
                rhs: ['selectors_group', 'COMMA', 'selector'],
                action: function () {
                    this.$1.push(this.$3);
                }
            },

            // ---------------------- selector
            {
                symbol: 'selector',
                rhs: ['simple_selector_sequence']
            },
            {
                symbol: 'selector',
                rhs: ['selector', 'combinator', 'simple_selector_sequence'],
                action: function () {
                    // LinkedList

                    this.$1.nextCombinator = this.$3.prevCombinator = this.$2;
                    var order;
                    order = this.$1.order = this.$1.order || 0;
                    this.$3.order = order + 1;
                    this.$3.prev = this.$1;
                    this.$1.next = this.$3;
                    return this.$3;
                }
            },

            // ---------------------- combinator
            {
                symbol: 'combinator',
                rhs: ['PLUS']
            },
            {
                symbol: 'combinator',
                rhs: ['GREATER']
            },
            {
                symbol: 'combinator',
                rhs: ['TILDE']
            },
            {
                symbol: 'combinator',
                rhs: ['S'],
                action: function () {
                    return ' ';
                }
            },

            // ---------------------- type_selector
            {
                symbol: 'type_selector',
                rhs: ['IDENT'],
                action: function () {
                    return {
                        t: 'tag',
                        value: this.$1
                    };
                }
            },
            {
                symbol: 'type_selector',
                rhs: ['UNIVERSAL'],
                action: function () {
                    return {
                        t: 'tag',
                        value: this.$1
                    };
                }
            },

            {
                symbol: 'id_selector',
                rhs: ['HASH'],
                action: function () {
                    return {
                        t: 'id',
                        value: this.$1
                    };
                }
            },

            {
                symbol: 'class_selector',
                rhs: ['CLASS'],
                action: function () {
                    return {
                        t: 'cls',
                        value: this.$1
                    };
                }
            },

            // ---------------------- attrib_match
            {
                symbol: 'attrib_match',
                rhs: ['PREFIX_MATCH']
            },
            {
                symbol: 'attrib_match',
                rhs: ['SUFFIX_MATCH']
            },
            {
                symbol: 'attrib_match',
                rhs: ['SUBSTRING_MATCH']
            },
            {
                symbol: 'attrib_match',
                rhs: ['ALL_MATCH']
            },
            {
                symbol: 'attrib_match',
                rhs: ['INCLUDES']
            },
            {
                symbol: 'attrib_match',
                rhs: ['DASH_MATCH']
            },

            // ---------------------- attrib
            {
                symbol: 'attrib',
                rhs: ['LEFT_BRACKET', 'IDENT', 'RIGHT_BRACKET'],
                action: function () {
                    return {
                        t: 'attrib',
                        value: {
                            ident: this.$2
                        }
                    };
                }
            },
            {
                symbol: 'attrib_val',
                rhs: ['IDENT']
            },
            {
                symbol: 'attrib_val',
                rhs: ['STRING']
            },
            {
                symbol: 'attrib',
                rhs: ['LEFT_BRACKET', 'IDENT', 'attrib_match', 'attrib_val', 'RIGHT_BRACKET'],
                action: function () {
                    return {
                        t: 'attrib',
                        value: {
                            ident: this.$2,
                            match: this.$3,
                            value: this.$4
                        }
                    };
                }
            },

            // ---------------------- pseudo
            {
                symbol: 'pseudo',
                rhs: ['COLON', 'FUNCTION', 'PARAMETER', 'RIGHT_PARENTHESES'],
                action: function () {
                    return {
                        t: 'pseudo',
                        value: {
                            fn: this.$2.toLowerCase(),
                            param: this.$3
                        }
                    };
                }
            },
            {
                symbol: 'pseudo',
                rhs: ['COLON', 'IDENT'],
                action: function () {
                    return {
                        t: 'pseudo',
                        value: {
                            ident: this.$2.toLowerCase()
                        }
                    };
                }
            },

            // ---------------------- negation
            {
                symbol: 'negation',
                rhs: ['NOT', 'negation_arg', 'RIGHT_PARENTHESES'],
                action: function () {
                    return {
                        t: 'pseudo',
                        value: {
                            fn: 'not',
                            param: this.$2
                        }
                    };
                }
            },
            {
                symbol: 'negation_arg',
                rhs: ['type_selector']
            },
            {
                symbol: 'negation_arg',
                rhs: ['id_selector']
            },
            {
                symbol: 'negation_arg',
                rhs: ['class_selector']
            },
            {
                symbol: 'negation_arg',
                rhs: ['attrib']
            },
            {
                symbol: 'negation_arg',
                rhs: ['pseudo']
            },

            // ---------------------- suffix_selector
            {
                symbol: 'suffix_selector',
                rhs: ['id_selector']
            },
            {
                symbol: 'suffix_selector',
                rhs: ['class_selector']
            },
            {
                symbol: 'suffix_selector',
                rhs: ['attrib']
            },
            {
                symbol: 'suffix_selector',
                rhs: ['pseudo']
            },
            {
                symbol: 'suffix_selector',
                rhs: ['negation']
            },
            {
                symbol: 'suffix_selectors',
                rhs: ['suffix_selector'],
                action: function () {
                    return [ this.$1 ];
                }
            },
            {
                symbol: 'suffix_selectors',
                rhs: ['suffix_selectors', 'suffix_selector'],
                action: function () {
                    this.$1.push(this.$2);
                }
            },

            // ---------------------- simple_selector_sequence
            {
                symbol: 'simple_selector_sequence',
                rhs: ['type_selector']
            },
            {
                symbol: 'simple_selector_sequence',
                rhs: ['suffix_selectors'],
                action: function () {
                    return {
                        suffix: this.$1
                    };
                }
            },
            {
                symbol: 'simple_selector_sequence',
                rhs: ['type_selector', 'suffix_selectors'],
                action: function () {
                    return {
                        t: 'tag',
                        value: this.$1.value,
                        suffix: this.$2
                    };
                }
            }
        ],
        lexer: {
            rules: [
                {
                    regexp: new RegExp('^' + '\\[' + w),
                    token: 'LEFT_BRACKET',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '\\]'),
                    token: 'RIGHT_BRACKET',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '~=' + w),
                    token: 'INCLUDES',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '\\|=' + w),
                    token: 'DASH_MATCH',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '\\^=' + w),
                    token: 'PREFIX_MATCH',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '\\$=' + w),
                    token: 'SUFFIX_MATCH',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '\\*=' + w),
                    token: 'SUBSTRING_MATCH',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '\\=' + w),
                    token: 'ALL_MATCH',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + ident + '\\('),
                    token: 'FUNCTION',
                    action: function () {
                        this.text = KISSY.trim(this.text).slice(0, -1);
                        this.pushState('fn');
                    }
                },
                {
                    state: ['fn'],
                    regexp: /^[^\)]*/,
                    token: 'PARAMETER',
                    action: function () {
                        this.popState();
                    }
                },
                {
                    regexp: new RegExp('^' + w + '\\)'),
                    token: 'RIGHT_PARENTHESES',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^:not\\(' + w,'i'),
                    token: 'NOT',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + ident),
                    token: 'IDENT',
                    action: function () {
                        this.text = this.yy.unEscape(this.text);
                    }
                },
                {
                    regexp: /^"(\\"|[^"])*"/,
                    token: 'STRING',
                    action: function () {
                        this.text = this.yy.unEscapeStr(this.text);
                    }
                },
                {
                    regexp: /^'(\\'|[^'])*'/,
                    token: 'STRING',
                    action: function () {
                        this.text = this.yy.unEscapeStr(this.text);
                    }
                },
                {
                    regexp: new RegExp('^#' + name),
                    token: 'HASH',
                    action: function () {
                        this.text = this.yy.unEscape(this.text.slice(1));
                    }
                },
                {
                    regexp: new RegExp('^\\.' + ident),
                    token: 'CLASS',
                    action: function () {
                        this.text = this.yy.unEscape(this.text.slice(1));
                    }
                },
                {
                    regexp: new RegExp('^' + w + ',' + w),
                    token: 'COMMA',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: /^::?/,
                    token: 'COLON'
                },
                {
                    regexp: new RegExp('^' + w + '\\+' + w),
                    token: 'PLUS',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '>' + w),
                    token: 'GREATER',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: new RegExp('^' + w + '~' + w),
                    token: 'TILDE',
                    action: function () {
                        this.text = KISSY.trim(this.text);
                    }
                },
                {
                    regexp: /^\*/,
                    token: 'UNIVERSAL'
                },
                {
                    regexp: new RegExp('^' + s),
                    token: 'S'
                },
                {
                    regexp: /^./,
                    token: 'INVALID'
                }
            ]
        }

    }
})();