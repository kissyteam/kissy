/**
 * lalr grammar and lexer rules for json.
 * refer: http://www.json.org/
 * refer: ecmascript5
 * @author yiminghe@gmail.com
 */
(function () {

    return {
        productions: [
            {
                symbol: 'json',
                rhs: ['value'],
                action: function () {
                    return this.$1;
                }
            },
            {
                symbol: 'value',
                rhs: ['STRING'],
                action: function () {
                    return this.yy.unQuote(this.$1);
                }
            },
            {
                symbol: 'value',
                rhs: ['NUMBER'],
                action: function () {
                    return parseFloat(this.$1);
                }
            },
            {
                symbol: 'value',
                rhs: ['object'],
                action: function () {
                    return this.$1;
                }
            },
            {
                symbol: 'value',
                rhs: ['array'],
                action: function () {
                    return this.$1;
                }
            },
            {
                symbol: 'value',
                rhs: ['BOOLEAN'],
                action: function () {
                    return this.$1 === 'true';
                }
            },
            {
                symbol: 'value',
                rhs: ['NULL'],
                action: function () {
                    return null;
                }
            },
            {
                symbol: 'elementList',
                rhs: ['value'],
                action: function () {
                    return [ this.$1 ];
                }
            },
            {
                symbol: 'elementList',
                rhs: ['elementList', 'COMMA', 'value'],
                action: function () {
                    this.$1[ this.$1.length ] = this.$3;
                    return this.$1;
                }
            },
            {
                symbol: 'array',
                rhs: ['LEFT_BRACKET', 'RIGHT_BRACKET'],
                action: function () {
                    return [];
                }
            },
            {
                symbol: 'array',
                rhs: ['LEFT_BRACKET', 'elementList', 'RIGHT_BRACKET'],
                action: function () {
                    return this.$2;
                }
            },
            {
                symbol: 'member',
                rhs: ['STRING', 'COLON', 'value'],
                action: function () {
                    return {
                        key: this.yy.unQuote(this.$1),
                        value: this.$3
                    }
                }
            },
            {
                symbol: 'memberList',
                rhs: ['member'],
                action: function () {
                    var ret = {};
                    ret[this.$1.key] = this.$1.value;
                    return ret;
                }
            },
            {
                symbol: 'memberList',
                rhs: ['memberList', 'COMMA', 'member'],
                action: function () {
                    this.$1[this.$3.key] = this.$3.value;
                    return this.$1;
                }
            },
            {
                symbol: 'object',
                rhs: ['LEFT_BRACE', 'RIGHT_BRACE'],
                action: function () {
                    return {};
                }
            },
            {
                symbol: 'object',
                rhs: ['LEFT_BRACE', 'memberList', 'RIGHT_BRACE'],
                action: function () {
                    return this.$2;
                }
            }
        ],
        lexer: {
            rules: [
                {
                    // only allow double quote
                    regexp: /^"(\\"|\\\\|\\\/|\\b|\\f|\\n|\\r|\\t|\\u[0-9a-zA-Z]{4}|[^\\"\x00-\x1f])*"/,
                    token: 'STRING'
                },
                {
                    // ignore
                    regexp: /^[\t\r\n\x20]/
                    //token: 'WHITE_SPACE'
                },
                {
                    regexp: /^,/,
                    token: 'COMMA'
                },
                {
                    regexp: /^:/,
                    token: 'COLON'
                },
                {
                    regexp: /^\[/,
                    token: 'LEFT_BRACKET'
                },
                {
                    regexp: /^\]/,
                    token: 'RIGHT_BRACKET'
                },
                {
                    regexp: /^\{/,
                    token: 'LEFT_BRACE'
                },
                {
                    regexp: /^\}/,
                    token: 'RIGHT_BRACE'
                },
                {
                    regexp: /^-?\d+(?:\.\d+)?(?:e-?\d+)?/i,
                    token: 'NUMBER'
                },
                {
                    regexp: /^true|false/,
                    token: 'BOOLEAN'
                },
                {
                    regexp: /^null/,
                    token: 'NULL'
                },
                {
                    regexp: /^./,
                    token: 'INVALID'
                }
            ]
        }

    }
})();