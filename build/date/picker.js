/*
Copyright 2013, KISSY UI Library v1.40dev
MIT Licensed
build time: Aug 8 12:09
*/
/*
 Combined processedModules by KISSY Module Compiler: 

 date/picker/picker-tpl
 date/picker/render
 date/picker/control
 date/picker
*/

/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/picker-tpl',
'<div class="{{getBaseCssClasses \'header\'}}"> <a id="ks-date-picker-previous-month-{{id}}" class="{{getBaseCssClasses \'prev-month\'}}" href="#" role="button" title="{{previousMonthLabel}}" hidefocus="on"> </a> <div class="{{getBaseCssClasses \'month\'}}"> <a class="{{getBaseCssClasses \'month-select\'}}" role="button" href="#" hidefocus="on" title="{{monthSelectLabel}}" id="ks-date-picker-month-select-{{id}}">{{monthYearLabel}}</a> </div> <a id="ks-date-picker-next-month-{{id}}" class="{{getBaseCssClasses \'next-month\'}}" href="#" role="button" title="{{nextMonthLabel}}" hidefocus="on"> </a> </div> <div class="{{getBaseCssClasses \'body\'}}"> <table class="{{getBaseCssClasses \'table\'}}" cellspacing="0" role="grid"> <thead> <tr role="row"> {{#each weekdays}} <th role="columnheader" title="{{.}}">{{veryShortWeekdays[xindex]}}</th> {{/each}} </tr> </thead> <tbody id="ks-date-picker-tbody-{{id}}"> {{renderDates}} </tbody> </table> </div> {{#if showToday}} <div class="{{getBaseCssClasses \'footer\'}}"> <a class="{{getBaseCssClasses \'today\'}}" role="button" hidefocus="on" href="#" id="ks-date-picker-today-{{id}}" title="{{todayTimeLabel}}">{{todayLabel}}</a> </div> {{/if}}');
/**
 * date picker render
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/render', function (S, Control, GregorianCalendar, DateTimeFormat, dateLocale, locale, PickerTpl) {
    var dateRowTplStart = '<tr role="row">';
    var dateRowTplEnd = '</tr>';
    var dateCellTpl = '<td role="gridcell" title="{title}" class="{cls}">content</td>';
    var dateTpl = '<a hidefocus="on" class="{cls}" href="#">content</a>';
    var DATE_ROW_COUNT = 6;
    var DATE_COL_COUNT = 7;

    function isSameDay(one, two) {
        return one.get(GregorianCalendar.YEAR) == two.get(GregorianCalendar.YEAR) &&
            one.get(GregorianCalendar.MONTH) == two.get(GregorianCalendar.MONTH) &&
            one.get(GregorianCalendar.DAY_OF_MONTH) == two.get(GregorianCalendar.DAY_OF_MONTH);
    }

    function beforeCurrentMonthYear(current, today) {
        if (current.get(GregorianCalendar.YEAR) < today.get(GregorianCalendar.YEAR)) {
            return 1;
        }
        return current.get(GregorianCalendar.YEAR) == today.get(GregorianCalendar.YEAR) &&
            current.get(GregorianCalendar.MONTH) < today.get(GregorianCalendar.MONTH);
    }

    function afterCurrentMonthYear(current, today) {
        if (current.get(GregorianCalendar.YEAR) > today.get(GregorianCalendar.YEAR)) {
            return 1;
        }
        return current.get(GregorianCalendar.YEAR) == today.get(GregorianCalendar.YEAR) &&
            current.get(GregorianCalendar.MONTH) > today.get(GregorianCalendar.MONTH);
    }

    return Control.getDefaultRender().extend({
        beforeCreateDom: function (renderData, childrenSelectors, renderCommands) {
            var self = this;
            var control = self.control;
            var value = control.get('value');
            S.mix(childrenSelectors, {
                previousMonthEl: '#ks-date-picker-previous-month-{id}',
                monthSelectEl: '#ks-date-picker-month-select-{id}',
                nextMonthEl: '#ks-date-picker-next-month-{id}',
                tbodyEl: '#ks-date-picker-today-{id}'
            });
            S.mix(renderData, {
                monthYearLabel: new DateTimeFormat(locale.monthYearFormat).format(value),
                previousMonthLabel: locale.previousMonth,
                monthSelectLabel: locale.monthSelect,
                nextMonthLabel: locale.nextMonth,
                weekdays: dateLocale.weekdays,
                veryShortWeekdays: locale.veryShortWeekdays,
                todayLabel: locale.today,
                todayTimeLabel: new DateTimeFormat(locale.dateFormat).format(value)
            });
            renderCommands.renderDates = S.bind(self.renderDates, self);
        },
        renderDates: function () {
            var self = this,
                i, j,
                tables = new Array(DATE_ROW_COUNT),
                current,
                control = self.control,
                value = control.get('value'),
                today = value.clone(),
                cellClass = self.getBaseCssClass('cell'),
                dateClass = self.getBaseCssClass('date'),
                dateRender = control.get('dateRender'),
                disabledDate = control.get('disabledDate'),
                dateFormatter = new DateTimeFormat(locale.dateFormat, dateLocale),
                todayClass = self.getBaseCssClass('today'),
                lastMonthDayClass = self.getBaseCssClass('last-month-day'),
                nextMonthDayClass = self.getBaseCssClass('next-month-day'),
                disabledClass = self.getBaseCssClass('disabled-day');

            today.setTimeInMillis(S.now());
            var month1 = value.clone();

            month1.set(value.get(GregorianCalendar.YEAR), value.get(GregorianCalendar.MONTH), 1);
            var day = month1.get(GregorianCalendar.DAY_OF_WEEK);
            var lastMonthDiffDay = (day + 7 - value.getFirstDayOfWeek()) % 7;
            // calculate last month
            var lastMonth1 = month1.clone();
            lastMonth1.add(GregorianCalendar.DAY_OF_MONTH, -lastMonthDiffDay);
            var passed = 0;
            for (i = 0; i < DATE_ROW_COUNT; i++) {
                tables[i] = new Array(DATE_COL_COUNT);
                for (j = 0; j < DATE_COL_COUNT; j++) {
                    current = lastMonth1;
                    if (passed) {
                        current = current.clone();
                        current.add(GregorianCalendar.DAY_OF_MONTH, passed);
                    }
                    tables[i][j] = current;
                    passed++;
                }
            }
            var tableHtml = '';
            for (i = 0; i < DATE_ROW_COUNT; i++) {
                var rowHtml = dateRowTplStart;
                for (j = 0; j < DATE_COL_COUNT; j++) {
                    current = tables[i][j];
                    var cls = cellClass;

                    if (isSameDay(current, today)) {
                        cls += ' ' + todayClass;
                    }
                    if (beforeCurrentMonthYear(current, value)) {
                        cls += ' ' + lastMonthDayClass;
                    }
                    if (afterCurrentMonthYear(current, value)) {
                        cls += ' ' + nextMonthDayClass;
                    }
                    if (disabledDate && disabledDate(current, value)) {
                        cls += ' ' + disabledClass;
                    }

                    var dateHtml = '';
                    if (dateRender && (dateHtml = dateRender(current, value))) {
                    } else {
                        dateHtml = S.substitute(dateTpl, {
                            cls: dateClass,
                            content: current.get(GregorianCalendar.DAY_OF_MONTH)
                        });
                    }
                    rowHtml += S.substitute(dateCellTpl, {
                        cls: cls,
                        title: dateFormatter.format(current),
                        content: dateHtml
                    });
                }
                tableHtml += rowHtml + dateRowTplEnd;
            }
            return tableHtml;
        }
    }, {
        ATTRS: {
            contentTpl: {
                value: PickerTpl
            }
        }
    });
}, {
    requires: ['component/control',
        'date/gregorian',
        'date/format',
        'i18n!date',
        'i18n!date/picker',
        './picker-tpl']
});
/**
 * date picker control
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/control', function (S, GregorianDate, Control, PickerRender) {
    return Control.extend({

    }, {
        xclass: 'date-picker',
        ATTRS: {
            value: {
                valueFn: function () {
                    var date = new GregorianDate();
                    date.setTimeInMillis(S.now());
                    return date;
                }
            },
            previousMonthEl: {},
            monthSelectEl: {},
            nextMonthEl: {},
            tbodyEl: {},
            todayEl: {},
            dateRender:{},
            disabledDate:{},
            showToday: {
                view: 1,
                value: true
            },
            xrender: {
                value: PickerRender
            }
        }
    });
}, {
    requires: ['date/gregorian', 'component/control', './render']
});
/**
 * date picker ui
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker',function(S,DatePicker){
    return DatePicker;
},{
    requires:['./picker/control']
});

